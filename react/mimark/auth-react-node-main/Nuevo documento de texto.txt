// Importa el hook useQuery de la biblioteca de react-query
import { useQuery } from '@tanstack/react-query';
// Importa las funciones de API para obtener y crear proveedores
import { useGetProveedor, usePostProveedor } from '../api/proveedorlist';
// Importa el componente de diseño de PortalLayout
import PortalLayout from '../layout/PortalLayout';
// Importa los hooks useState, ChangeEvent y FormEvent de React
import { useState, ChangeEvent, FormEvent } from 'react'; 

// Define el componente CustomerPage
const CustomerPage = () => {
  // Usa el hook useQuery para obtener datos del proveedor y una función para recargarlos
  const { data: proveedor, refetch } = useQuery({
    // Establece la clave de consulta
    queryKey: ['proveedor'],
    // Establece la función de consulta para obtener proveedores
    queryFn: useGetProveedor,
    // Establece el tiempo máximo de antigüedad de los datos en caché
    staleTime: 1000 * 60 * 30,
    // No recargar los datos cuando la ventana no está enfocada
    refetchOnWindowFocus: false,
    // Establece un intervalo para recargar automáticamente los datos cada 30 minutos
    refetchInterval: 1000 * 60 * 30,
  });

  // Define el estado del formulario
  const [formData, setFormData] = useState({
    nombre: '',
    direccion: '',
    telefono: '',
    ciudad: ''
  });

  // Maneja el cambio en los campos del formulario
  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };

  // Maneja el envío del formulario
  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    try {
      // Envía los datos del nuevo proveedor al servidor
      await usePostProveedor(formData);
      // Actualiza la lista de proveedores volviendo a cargar los datos
      await refetch();
      // Limpia el formulario después de enviar
      setFormData({
        nombre: '',
        direccion: '',
        telefono: '',
        ciudad: ''
      });
    } catch (error) {
      console.error('Error al agregar proveedor:', error);
    }
  };

  // Si no hay datos de proveedor, muestra un mensaje de carga
  if (!proveedor) {
    return <div>Cargando...</div>;
  }

  // Función para eliminar un proveedor
  const useDeleteProveedor = (id: number) => {
    console.log(`Eliminando proveedor con ID: ${id}`);
    // Aquí iría la lógica para eliminar un proveedor...
  };

  // Función para editar un proveedor
  const editarProveedor = (id: number) => {
    console.log(`Editando proveedor con ID: ${id}`);
    // Aquí iría la lógica para editar un proveedor...
  };

  // Renderiza el componente CustomerPage
  return (
    <PortalLayout>
      <div className="container">
        <form onSubmit={handleSubmit}>
          <label>
            Nombre:
            <input type="text" name="nombre" value={formData.nombre} onChange={handleChange} />
          </label>
          <label>
            Dirección:
            <input type="text" name="direccion" value={formData.direccion} onChange={handleChange} />
          </label>
          <label>
            Teléfono:
            <input type="text" name="telefono" value={formData.telefono} onChange={handleChange} />
          </label>
          <label>
            Ciudad:
            <input type="text" name="ciudad" value={formData.ciudad} onChange={handleChange} />
          </label>
          <button type="submit">Agregar Proveedor</button>
        </form>

        <table className="table table-striped">
          <thead>
            <tr>
              <th>id_proveedor</th>
              <th>nombre</th>
              <th>Direccion</th>
              <th>Telefono</th>
              <th>Ciudad</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {proveedor.map((proveedor) => (
              <tr key={proveedor.id_proveedor}>
                <td>{proveedor.id_proveedor}</td>
                <td>{proveedor.nombre}</td>
                <td>{proveedor.direccion}</td>
                <td>{proveedor.telefono}</td>
                <td>{proveedor.ciudad}</td>
                <td>
                  <button onClick={() => editarProveedor(proveedor.id_proveedor)}>Editar</button>
                </td>
                <td>
                  <button onClick={() => useDeleteProveedor(proveedor.id_proveedor)}>Eliminar</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </PortalLayout>
  );
}

// Exporta el componente CustomerPage
export default CustomerPage;





------------------------------------------codigo ok 

------------------------------------------


import React, { useState, ChangeEvent, FormEvent } from 'react';
import { useQuery } from '@tanstack/react-query';
import { usePutProveedor, useGetProveedor, usePostProveedor, useDeleteProveedor, useUpdateProveedor } from '../api/proveedorlist.tsx';
import PortalLayout from '../layout/PortalLayout';




const CustomerPage = () => {
  const { data: proveedor, refetch } = useQuery({
    queryKey: ['proveedor'],
    queryFn: useGetProveedor,
    staleTime: 1000 * 60 * 30,
    refetchOnWindowFocus: false,
    refetchInterval: 1000 * 60 * 30,
  });

  const [formData, setFormData] = useState({
    id_proveedor: '',
    nombre: '',
    direccion: '',
    telefono: '',
    ciudad: ''
  });

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    try {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      await usePostProveedor(formData);
      await refetch();
      alert('¡Proveedor creado exitosamente!');
      setFormData({
        id_proveedor:'',
        nombre: '',
        direccion: '',
        telefono: '',
        ciudad: ''
      });
    } catch (error) {
      console.error('Error al agregar proveedor:', error);
    }
  };

  if (!proveedor) {
    return <div>Cargando...</div>;
  }



  
  

  const editarProveedor = (id: number) => {
    console.log(`Editando proveedor con ID: ${id}`);
    const proveedorEditado = proveedor.find(prov => prov.id_proveedor === id);
    if (proveedorEditado) {
      setFormData(proveedorEditado);
    }
  };

 const handleUpdateProveedor = async () => {
  try {
    // Validar si hay cambios en el formulario
    const hasChanged =
      formData.id_proveedor !== '' ||
      formData.nombre !== '' ||
      formData.direccion !== '' ||
      formData.telefono !== '' ||
      formData.ciudad !== '';

    // Si hay cambios, actualizar el proveedor
    if (hasChanged) {
      // Se omite el "eslint-disable-next-line react-hooks/rules-of-hooks" ya que no se usa un hook dentro de otro hook.
      await useUpdateProveedor(formData);
      await refetch();
    }

    // Restablecer el formulario
    setFormData({
      id_proveedor: '',
      nombre: '',
      direccion: '',
      telefono: '',
      ciudad: '',
    });
  } catch (error) {
    console.error('Error al actualizar proveedor:', error);
  }
};

  return (
    <PortalLayout>
      <div className="container">
        <form onSubmit={handleSubmit}>
          <label>
            Nombre:
            <input type="text" name="nombre" value={formData.nombre} onChange={handleChange} />
          </label>
          <label>
            Dirección:
            <input type="text" name="direccion" value={formData.direccion} onChange={handleChange} />
          </label>
          <label>
            Teléfono:
            <input type="text" name="telefono" value={formData.telefono} onChange={handleChange} />
          </label>
          <label>
            Ciudad:
            <input type="text" name="ciudad" value={formData.ciudad} onChange={handleChange} />
          </label>
          <button type="submit">Agregar Proveedor</button>
          <button type="button" onClick={handleUpdateProveedor}>Actualizar Proveedor</button>
        </form>

        <table className="table table-striped">
          <thead>
            <tr>
              <th>id_proveedor</th>
              <th>nombre</th>
              <th>Direccion</th>
              <th>Telefono</th>
              <th>Ciudad</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {proveedor.map((prov) => (
              <tr key={prov.id_proveedor}>
                <td>{prov.id_proveedor}</td>
                <td>{prov.nombre}</td>
                <td>{prov.direccion}</td>
                <td>{prov.telefono}</td>
                <td>{prov.ciudad}</td>
                <td>
                  <button onClick={() => editarProveedor(prov.id_proveedor)}>Editar</button>
                </td>
                <td>
                  <button onClick={() => deleteProveedor(prov.id_proveedor)}>Eliminar</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </PortalLayout>
  );
};

export default CustomerPage;










 **Aquí te explico el código:**

**Importaciones:**

- **Proveedor** de '../types/types': Importa un tipo llamado Proveedor, probablemente definido para representar datos de proveedores.
- **apiClient** de '../apiClient': Importa un cliente API, utilizado para hacer llamadas a una API REST.

**Función useGetProveedor:**

- Es una función asíncrona (async) que obtiene datos de proveedores a través de la API.
- Encapsula la lógica de la llamada a la API y el tratamiento de errores.

**Pasos que realiza:**

1. **Intenta obtener datos:**
   - Usa `apiClient.get<Proveedor[]>('/proveedor/')` para hacer una petición GET a la API, esperando una respuesta con un array de objetos Proveedor.
   - Almacena la respuesta en la variable `response`.
   - Extrae los datos de la respuesta (`response.data`) y los devuelve.

2. **Maneja errores:**
   - Si ocurre un error, lo registra en la consola (`console.log(error)`) y devuelve undefined.

**Observaciones:**

- El tipo Proveedor define la estructura de los datos de proveedores esperados en la respuesta de la API.
- El cliente API `apiClient` proporciona métodos para interactuar con la API REST.
- La función `useGetProveedor` es probablemente usada en un componente React para obtener los datos de proveedores y mostrarlos en la interfaz.




















